{"version":3,"sources":["components/TopNavBar.jsx","api/books.js","components/ActionButtons.jsx","components/Cards.jsx","pages/Shelfs.jsx","helper/books.js","pages/SearchList.jsx","App.js","reportWebVitals.js","index.js"],"names":["TopNavBar","useState","criteria","setCriteria","history","useHistory","Navbar","bg","variant","expand","to","Brand","Toggle","aria-controls","Collapse","id","Nav","className","Form","inline","onSubmit","e","preventDefault","push","FormControl","type","placeholder","value","onChange","target","Button","disabled","onClick","api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","ActionButtons","book","currentBook","updateOneBook","currentShelf","setCurrentShelf","isCurrentlyReading","setCurrentlyReading","isWantToRead","setWantToRead","isRead","setRead","isUpdating","setIsUpdating","useEffect","shelf","updateShelf","fetch","method","body","JSON","stringify","then","res","json","data","updatedBook","Object","assign","style","styles","actionButton","bookCurrentlyReading","greyButton","title","bookWantToRead","bookRead","Spinner","animation","border","padding","margin","borderRadius","whiteSpace","color","Cards","books","currentBooks","cards","filter","map","find","item","Card","width","Img","src","image","height","Body","Title","Text","authors","Footer","CardColumns","Shelfs","prepareBookList","Array","isArray","join","imageLinks","smallThumbnail","SearchList","useParams","setBooks","isSearching","setIsSearching","query","listOfBooks","length","App","globalBooks","setGlobalBooks","filteredBooks","Container","exact","path","render","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c67c782b.chunk.js","sourcesContent":["import { React, useState } from 'react';\nimport { Nav, Navbar, Form, FormControl, Button } from 'react-bootstrap';\nimport { Link, useHistory } from 'react-router-dom';\nimport { LinkContainer } from 'react-router-bootstrap';\n\nexport default function TopNavBar() {\n  const [criteria, setCriteria] = useState('');\n\n  let history = useHistory();\n\n  const handleCriteriaChange = (e) => {\n    setCriteria(e.target.value);\n  };\n\n  const handleSearchClick = () => {\n    setCriteria('');\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    history.push(`/search/${criteria}`);\n    setCriteria('');\n  };\n\n  return (\n    <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\n      <LinkContainer to=\"/\">\n        <Navbar.Brand>Lista de leituras</Navbar.Brand>\n      </LinkContainer>\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse id=\"basic-navbar-nav\">\n        <Nav className=\"mr-auto\"></Nav>\n        <Form inline onSubmit={handleSubmit}>\n          <FormControl\n            type=\"text\"\n            placeholder=\"Search\"\n            className=\"mr-sm-2\"\n            value={criteria}\n            onChange={handleCriteriaChange}\n          />\n          <Link to={`/search/${criteria}`}>\n            <Button\n              variant=\"outline-success\"\n              disabled={!criteria}\n              onClick={handleSearchClick}\n            >\n              Search\n            </Button>\n          </Link>\n        </Form>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n}\n","const api = 'https://reactnd-books-api.udacity.com';\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token;\nif (!token) token = localStorage.token = Math.random().toString(36).substr(-8);\n//token = '123';\nconst headers = {\n  Accept: 'application/json',\n  Authorization: token,\n};\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then((res) => res.json())\n    .then((data) => data.book);\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then((res) => res.json())\n    .then((data) => data.books);\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({ shelf }),\n  }).then((res) => res.json());\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({ query }),\n  })\n    .then((res) => res.json())\n    .then((data) => data.books);\n","import { React, useState, useEffect } from 'react';\nimport { BsFillBookmarkFill } from 'react-icons/bs';\nimport Spinner from 'react-bootstrap/Spinner';\n\nimport * as api from '../api/books';\n\nexport default function ActionButtons({ book, currentBook, updateOneBook }) {\n  const [currentShelf, setCurrentShelf] = useState('');\n\n  const [isCurrentlyReading, setCurrentlyReading] = useState(false);\n  const [isWantToRead, setWantToRead] = useState(false);\n  const [isRead, setRead] = useState(false);\n\n  const [isUpdating, setIsUpdating] = useState(false);\n\n  useEffect(() => {\n    if (!!currentBook) {\n      setCurrentShelf(currentBook.shelf);\n\n      return;\n    }\n\n    setCurrentShelf(book.shelf ?? '');\n  }, [currentBook, book.shelf]);\n\n  useEffect(() => {\n    if (currentShelf === '') {\n      setCurrentlyReading(false);\n      setWantToRead(false);\n      setRead(false);\n\n      return;\n    }\n\n    if (currentShelf === 'currentlyReading') {\n      setCurrentlyReading(true);\n      setWantToRead(false);\n      setRead(false);\n\n      return;\n    }\n\n    if (currentShelf === 'wantToRead') {\n      setCurrentlyReading(false);\n      setWantToRead(true);\n      setRead(false);\n\n      return;\n    }\n\n    if (currentShelf === 'read') {\n      setCurrentlyReading(false);\n      setWantToRead(false);\n      setRead(true);\n\n      return;\n    }\n  }, [currentShelf]);\n\n  const updateShelf = (shelf) => {\n    setIsUpdating(true);\n\n    api.update(book, shelf).then((data) => {\n      const updatedBook = Object.assign({}, book);\n      updatedBook.shelf = shelf;\n\n      updateOneBook(updatedBook);\n      setIsUpdating(false);\n    });\n  };\n\n  const handleAddToCurrentlyReading = (e) => {\n    setCurrentShelf('currentlyReading');\n    updateShelf('currentlyReading');\n  };\n\n  const handleAddToWantToRead = (e) => {\n    setCurrentShelf('wantToRead');\n    updateShelf('wantToRead');\n  };\n\n  const handleAddToRead = (e) => {\n    setCurrentShelf('read');\n    updateShelf('read');\n  };\n\n  return (\n    <>\n      <div>\n        <button\n          type=\"button\"\n          style={\n            isCurrentlyReading\n              ? { ...styles.actionButton, ...styles.bookCurrentlyReading }\n              : { ...styles.actionButton, ...styles.greyButton }\n          }\n          onClick={handleAddToCurrentlyReading}\n          disabled={isCurrentlyReading}\n          title=\"Lendo atualmente\"\n        >\n          <BsFillBookmarkFill />\n        </button>\n        <button\n          type=\"button\"\n          style={\n            isWantToRead\n              ? { ...styles.actionButton, ...styles.bookWantToRead }\n              : { ...styles.actionButton, ...styles.greyButton }\n          }\n          onClick={handleAddToWantToRead}\n          disabled={isWantToRead}\n          title=\"Quero ler\"\n        >\n          <BsFillBookmarkFill />\n        </button>\n        <button\n          type=\"button\"\n          style={\n            isRead\n              ? { ...styles.actionButton, ...styles.bookRead }\n              : { ...styles.actionButton, ...styles.greyButton }\n          }\n          onClick={handleAddToRead}\n          disabled={isRead}\n          title=\"Leitura concluída\"\n        >\n          <BsFillBookmarkFill />\n        </button>\n      </div>\n      {isUpdating && <Spinner animation=\"border\" />}\n    </>\n  );\n}\n\nconst styles = {\n  actionButton: {\n    border: '1px solid #e0e3e9',\n    padding: '5px 10px',\n    margin: '5px 6px 10px',\n    borderRadius: '4px',\n    whiteSpace: 'nowrap',\n  },\n  greyButton: {\n    color: 'grey',\n  },\n  bookCurrentlyReading: {\n    color: 'yellow',\n  },\n  bookWantToRead: {\n    color: 'blue',\n  },\n  bookRead: {\n    color: 'green',\n  },\n};\n","import { Card, CardColumns } from 'react-bootstrap';\nimport ActionButtons from './ActionButtons';\n\nexport default function Cards({ books, shelf, currentBooks, updateOneBook }) {\n  const localBooks = !shelf\n    ? books\n    : books.filter((book) => book.shelf === shelf);\n\n  const cards = localBooks.map((book) => {\n    const currentBook = currentBooks?.find((item) => item.id === book.id);\n\n    return (\n      <Card style={{ width: '18rem' }} key={book.id}>\n        <Card.Img\n          variant=\"top\"\n          src={book.image}\n          style={{ width: '128px', height: '158px' }}\n        />\n        <Card.Body>\n          <Card.Title>{book.title}</Card.Title>\n          <Card.Text>{book.authors}</Card.Text>\n        </Card.Body>\n        <Card.Footer>\n          <ActionButtons\n            book={book}\n            currentBook={currentBook}\n            updateOneBook={updateOneBook}\n          />\n        </Card.Footer>\n      </Card>\n    );\n  });\n\n  return (\n    <>\n      <CardColumns>{cards}</CardColumns>\n    </>\n  );\n}\n","import { React } from 'react';\n\nimport Cards from '../components/Cards';\n\nexport default function Shelfs({ updateOneBook, currentBooks }) {\n  return (\n    <>\n      <h1>Lendo atualmente</h1>\n      <Cards\n        books={currentBooks}\n        shelf=\"currentlyReading\"\n        updateOneBook={updateOneBook}\n      />\n      <h1>Quero ler</h1>\n      <Cards\n        books={currentBooks}\n        shelf=\"wantToRead\"\n        updateOneBook={updateOneBook}\n      />\n      <h1>Leitura concluída</h1>\n      <Cards books={currentBooks} shelf=\"read\" updateOneBook={updateOneBook} />\n    </>\n  );\n}\n","export const prepareBookList = (books) => {\n  if (!Array.isArray(books)) {\n    return [];\n  }\n\n  return books.map((book) => {\n    return {\n      id: book.id,\n      title: book.title,\n      authors: !!book.authors ? book.authors.join(', ') : '',\n      shelf: book.shelf,\n      image: book.imageLinks.smallThumbnail,\n    };\n  });\n};\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport Spinner from 'react-bootstrap/Spinner';\n\nimport Cards from '../components/Cards';\n\nimport * as api from '../api/books';\nimport { prepareBookList } from '../helper/books';\n\nexport default function SearchList({ currentBooks, updateOneBook }) {\n  const { criteria } = useParams();\n  const [books, setBooks] = useState([]);\n  const [isSearching, setIsSearching] = useState(false);\n\n  const renderElements = () => {\n    if (isSearching) {\n      return <Spinner animation=\"border\" />;\n    }\n\n    if (books.length === 0) {\n      return <div>Nenhum livro encontrado</div>;\n    }\n\n    return (\n      <Cards\n        books={books}\n        currentBooks={currentBooks}\n        updateOneBook={updateOneBook}\n      />\n    );\n  };\n\n  useEffect(() => {\n    setIsSearching(true);\n    api.search(criteria).then((data) => {\n      const listOfBooks = prepareBookList(data);\n\n      setBooks(listOfBooks);\n      setIsSearching(false);\n    });\n  }, [criteria, setIsSearching]);\n\n  return (\n    <>\n      <h1>Pesquisa de Livros</h1>\n      {renderElements()}\n    </>\n  );\n}\n","import { React, useState, useEffect } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from 'react-router-dom';\n\nimport Container from 'react-bootstrap/Container';\n\nimport TopNavBar from './components/TopNavBar';\nimport Shelfs from './pages/Shelfs';\nimport SearchList from './pages/SearchList';\n\nimport * as api from './api/books';\nimport { prepareBookList } from './helper/books';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nfunction App() {\n  const [globalBooks, setGlobalBooks] = useState([]);\n\n  useEffect(() => {\n    api.getAll().then((data) => {\n      const listOfBooks = prepareBookList(data);\n      setGlobalBooks(listOfBooks);\n    });\n  }, []);\n\n  const updateOneBook = (book) => {\n    const filteredBooks = globalBooks.filter((item) => item.id !== book.id);\n\n    setGlobalBooks([...filteredBooks, book]);\n  };\n\n  return (\n    <>\n      <Router>\n        <TopNavBar />\n        <div className=\"App\">\n          <Container>\n            <Switch>\n              <Route\n                exact\n                path=\"/\"\n                render={() => (\n                  <Shelfs\n                    currentBooks={globalBooks}\n                    updateOneBook={updateOneBook}\n                  />\n                )}\n              />\n              <Route\n                exact\n                path=\"/search/:criteria\"\n                render={() => (\n                  <SearchList\n                    currentBooks={globalBooks}\n                    updateOneBook={updateOneBook}\n                  />\n                )}\n              />\n              <Redirect to=\"/\" />\n            </Switch>\n          </Container>\n        </div>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}